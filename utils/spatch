#!/bin/sh
# shellcheck disable=SC2086
# shellcheck disable=SC2181

: <<'notice'
 * SPDX-License-Identifier: GPL-3.0
 *
 * Copyright (C) 2020 Dimitar Yurukov <mscalindt@protonmail.com>
 *
notice

usage() {
printf "%s" "\
Usage: spatch [options] [--] FILE
Sort commit/patch links by date.

Options:
  -d, --direct-url           assume URLs are valid patch links even if they do
                             not end with .patch
  -i, --invert-sort          sort from newest to oldest
  -l, --line-numbers         append line numbers to the sort output
  -p, --preserve-url         preserve the URLs
  -t, --target-file=PATH     PATH is an absolute or relative location to which
                             the sort output shall be written
  -T, --timestamp            append timestamp to the sort output
  -v, --verbose              show additional information unrelated to the sort
                             output
      --help     display this help text and exit
      --         specify end of options
"
}

# Description:
# Check command availability
#
# Parameters:
# $1 - command
#
# Returns:
# true (0) if command available,
# false (127) if not
#
cmd_avail() {
    if command -v $1 > /dev/null 2>&1; then
        return 0
    fi

    return 127
}

# Description:
# Check if a substring(s) is(are) present in a string
#
# Parameters:
# $1 - substring
# $1/$2 - substring
# $2/$3 - string
#
# Returns:
# true (0) if substring is present,
# false (1) if not
#
grep_str() {
    if [ ! "$3" ]; then
        case "$2" in
            *"$1"*) return 0 ;;
        esac
    else
        case "$3" in
            *"$1"*) return 0 ;;
            *"$2"*) return 0 ;;
        esac
    fi

    return 1
}

# Description:
# Get substring after specific (n)character(s) in a string
#
# Parameters:
# $1 - (n)
# $1/$2 - character(s)
# $2/$3 - string
#
# Returns:
# substring of string,
# false (1) if error
#
substr_after() {
    if [ ! "$3" ]; then
        i=$(printf "%s" "${2##*$1}")
    else
        x=0
        i=$(printf "%s" "$3")
        until [ $x -eq $1 ]; do
            i=$(printf "%s" "${i#*$2}")
            x=$((x + 1))
        done
    fi

    if [ -n "$i" ]; then
        printf "%s" "${i}"
        return 0
    fi

    return 1
}

# Description:
# Convert relative path to absolute path
#
# Parameters:
# $1 - path
#
# Returns:
# absolute path if path was converted,
# $1 if relative path was not passed
#
get_fpath() {
    case "$1" in
        "/"*) ;;
        *) i=$(printf "%s/%s" "$PWD" "$1") && set -- "$i" ;;
    esac

    printf "%s" "$1"
}

# Description:
# Print error in red and exit
#
# Parameters:
# $1 - error message
# $2 - exit code
#
err() {
    printf "%b" "\033[1;31m"
    echo
    printf "%s" "$1"
    echo && echo
    printf "%b" "\033[0m"
    exit $2
}

# Description:
# Print warn in yellow
#
# Parameters:
# $1 - warn message
#
warn() {
    printf "%b" "\033[1;33m"
    printf "%s" "$1"
    echo
    printf "%b" "\033[0m"
}

# Description:
# Redirect information from source file to target file
#
# Parameters:
# $1 - source file
# $2 - target file
#
rdr() {
    rm -f "$2" && cat "$1" > "$2"
    rm -f "$1"
}

spatch_work() {
    TMP_DIR="$HOME"/.spatch_tmp_dir
    TMP_FILE="$HOME"/.spatch_tmp_file
    TMP_FILE2="$HOME"/.spatch_tmp_file2

    rm -rf "$TMP_DIR" && mkdir "$TMP_DIR"
    rm -f "$TMP_FILE"
    rm -f "$TMP_FILE2"
    cd "$TMP_DIR" || err "Line $LINENO failed" "1"

    if cmd_avail curl; then
        dw_tool='curl'
        dw_tool_args='-Of'
    elif cmd_avail wget; then
        dw_tool='wget'
        dw_tool_args=''
    else
        spatch_post;
        err "No file download tool available (curl/wget)" "127"
    fi
}

spatch_exec() {
    if [ ! -f "$1" ]; then
        spatch_post;
        err "$1 is not a file" "1"
    fi

    while read -r LINE || [ -n "$LINE" ]; do
        URL=$(printf "%s" "$LINE" | grep -Eo '[^[:space:]]+://[^[:space:]]+')

        if [ $? -ne 0 ]; then
            if [ -n "$LINE" ]; then
                warn "No URL string (*://*) found in '$LINE'"
            fi
            continue
        fi

        if [ -z $directurl ]; then
            if ! grep_str ".patch" "$URL"; then
                URL=${URL}.patch
            fi
        fi

        if [ -n "$verbose" ]; then
            $dw_tool ${dw_tool_args} $URL
        else
            $dw_tool ${dw_tool_args} $URL > /dev/null 2>&1
        fi

        if [ $? -ne 0 ]; then
            spatch_post;
            err "Failed to download $URL" "1"
        fi
    done < "$1"

    ls "$TMP_DIR"/*.patch > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        spatch_post;
        err "No patches are found" "1"
    fi

    PATCHES="$TMP_DIR/*"
    for PATCH in $PATCHES; do
        CSTR=$(sed '1q;d' $PATCH | cut -d ' ' -f2)
        DSTR=$(sed '3q;d' $PATCH | cut -d ' ' -f3,4,5,6)

        if [ -n "$preserve" ]; then
            CSTR=$(grep -Eo -- "[^[:space:]]+$CSTR" "$1")
        fi

        if [ -n "$linenumbers" ]; then
            NUM=$((1 + CNT))
            CSTR="$NUM - $CSTR"
            CNT=$NUM
        fi

        printf "%s %s\n" "${CSTR}" "${DSTR}" >> "$TMP_FILE"
    done

    sort -t " " -k4.1,4.4 \
                -k3.1,3.3M \
                -k2.1n \
                -k5.1,5.2 \
                -k5.4,5.5 \
                -k5.7,5.8 "$TMP_FILE" > "$TMP_FILE2"
    rdr "$TMP_FILE2" "$TMP_FILE"

    if [ -n "$invert" ]; then
        awk '{a[i++]=$0;} END {for (j=i-1; j>=0;) print a[j--];}' \
            "$TMP_FILE" > "$TMP_FILE2"
        rdr "$TMP_FILE2" "$TMP_FILE"
    fi

    if [ -n "$timestamp" ]; then
        DATE=$(date "+%b %-e, %T %:z %Y")
        printf "TIMESTAMP: %s\n" "${DATE}" >> "$TMP_FILE"
    fi

    if [ -n "$targetfile" ]; then
        rdr "$TMP_FILE" "$targetfile"
    else
        while read -r LINE; do
            echo "$LINE"
        done < "$TMP_FILE"
    fi
}

spatch_post() {
    rm -rf "$TMP_DIR"
    rm -f "$TMP_FILE"
    rm -f "$TMP_FILE2"
}

spatch() {
    spatch_work;
    spatch_exec "$1"
    spatch_post;
}

main() {
    # Script argument functions
    saf1() { invert=1 ;}
    saf2() { preserve=1 ;}
    saf3() { timestamp=1 ;}
    saf4() { directurl=1 ;}
    saf5() { linenumbers=1 ;}
    saf6() { verbose=1 ;}

    # Serve the script until no script parameters passed
    while [ "$1" ]; do
        case "$1" in
            # Parse specific options first
            "--") shift && break ;;
            "--help") usage && return 0 ;;

            # Parse options
            "--"*)
                i=$(substr_after "--" "$1")

                if grep_str "direct-url" "$i"; then saf4; fi
                if grep_str "invert-sort" "$i"; then saf1; fi
                if grep_str "line-numbers" "$i"; then saf5; fi
                if grep_str "preserve-url" "$i"; then saf2; fi
                if grep_str "timestamp" "$i"; then saf3; fi
                if grep_str "verbose" "$i"; then saf6; fi

                if grep_str "target-file" "$i"; then
                    if grep_str "target-file=" "$i"; then
                        targetfile=$(substr_after "=" "$i")
                        targetfile=$(get_fpath "$targetfile")
                    elif ! grep_str "target-file " "$i"; then
                        targetfile=$(substr_after "2" "e" "$i")
                        targetfile=$(get_fpath "$targetfile")
                    elif [ "$2" ]; then
                        targetfile="$2"
                        targetfile=$(get_fpath "$targetfile")
                        shift
                    fi
                fi

                shift
            ;;
            "-"*)
                i=$(substr_after "-" "$1")

                if grep_str "t" "$i"; then
                    if grep_str "t=" "$i"; then
                        targetfile=$(substr_after "=" "$i")
                        targetfile=$(get_fpath "$targetfile")
                        shift && continue
                    elif ! grep_str "t " "$i"; then
                        targetfile=$(substr_after "1" "t" "$i")
                        targetfile=$(get_fpath "$targetfile")
                        shift && continue
                    elif [ "$2" ]; then
                        targetfile="$2"
                        targetfile=$(get_fpath "$targetfile")
                        shift 2 && continue
                    fi
                fi

                if grep_str "d" "$i"; then saf4; fi
                if grep_str "i" "$i"; then saf1; fi
                if grep_str "l" "$i"; then saf5; fi
                if grep_str "p" "$i"; then saf2; fi
                if grep_str "T" "$i"; then saf3; fi
                if grep_str "v" "$i"; then saf6; fi

                shift
            ;;

            *) break ;;
        esac
    done

    # Catch wrong input
    if [ ! "$1" ] || [ "$2" ]; then
        usage && return 2
    fi

    # Convert relative path to absolute path
    fpath=$(get_fpath "$1")
    set -- "$fpath"

    # Execute the core function
    spatch "$1"

    # Explicit success
    return 0
}

main "$@"
